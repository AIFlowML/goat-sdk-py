const { ethers } = require("ethers"); async function placeOrder() { const privateKey = "0xe40f880ec1de982aa82008ff0013ba1c4a1295b4ade0e253c8984660c9a587b5"; const wallet = new ethers.Wallet(privateKey); const order = { a: 0, b: true, p: "40000", s: "0.1", r: false, t: { limit: { tif: "Gtc" } } }; const time = Date.now(); const typedData = { types: { "HyperliquidTransaction:Order": [ { name: "hyperliquidChain", type: "string" }, { name: "orders", type: "Order[]" }, { name: "time", type: "uint64" } ], Order: [ { name: "a", type: "uint64" }, { name: "b", type: "bool" }, { name: "p", type: "string" }, { name: "s", type: "string" }, { name: "r", type: "bool" }, { name: "t", type: "OrderType" } ], OrderType: [ { name: "limit", type: "LimitOrder" } ], LimitOrder: [ { name: "tif", type: "string" } ] }, domain: { name: "HyperliquidSignTransaction", version: "1", chainId: 42161, verifyingContract: "0x0000000000000000000000000000000000000000" }, message: { hyperliquidChain: "Testnet", orders: [order], time } }; const signature = await wallet._signTypedData(typedData.domain, typedData.types, typedData.message); const request = { action: { type: "order", orders: [order], grouping: "na" }, nonce: time, signature }; console.log("Sending request:", JSON.stringify(request, null, 2)); const response = await fetch("https://api.hyperliquid.xyz/exchange", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(request) }); const result = await response.json(); console.log("Response:", JSON.stringify(result, null, 2)); } placeOrder().catch(console.error);
