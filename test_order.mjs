import { ethers } from "ethers"; import fetch from "node-fetch"; import { encode } from "@msgpack/msgpack"; async function placeOrder() { const privateKey = "0x33abbf57cf08fc326809df2e8785a6ec242c266ced05785c3a391a980a695f5f"; const walletAddress = "0x2CE4EaF47CACFbC6590686f8f7521e0385822334"; const wallet = new ethers.Wallet(privateKey); const time = Date.now(); const orderWire = { a: 134, b: true, p: "0.62691", s: "500", r: false, t: { limit: { tif: "Gtc" } } }; const action = { type: "order", orders: [orderWire], grouping: "na" }; const msgPackBytes = encode(action); const data = new Uint8Array(msgPackBytes.length + 9); data.set(msgPackBytes); const view = new DataView(data.buffer); view.setBigUint64(msgPackBytes.length, BigInt(time), false); view.setUint8(msgPackBytes.length + 8, 0); const hash = ethers.utils.keccak256(data); const phantomAgent = { source: "a", connectionId: hash }; const signature = await wallet._signTypedData({ name: "Exchange", version: "1", chainId: 1337, verifyingContract: "0x0000000000000000000000000000000000000000" }, { Agent: [ { name: "source", type: "string" }, { name: "connectionId", type: "bytes32" } ] }, phantomAgent); const { r, s, v } = ethers.utils.splitSignature(signature); const request = { action, nonce: time, signature: { r, s, v }, vaultAddress: null }; console.log("Sending request:", JSON.stringify(request, null, 2)); const response = await fetch("https://api.hyperliquid.xyz/exchange", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(request) }); const text = await response.text(); console.log("Raw response:", text); try { const result = JSON.parse(text); console.log("Parsed response:", JSON.stringify(result, null, 2)); } catch (e) { console.log("Failed to parse response as JSON"); } } placeOrder().catch(console.error);
